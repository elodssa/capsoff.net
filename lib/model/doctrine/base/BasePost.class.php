<?php

/**
 * BasePost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $category_id
 * @property integer $user_id
 * @property string $title
 * @property string $text
 * @property integer $views
 * @property integer $votes
 * @property boolean $is_show
 * @property Profile $Profile
 * @property Category $Category
 * @property Doctrine_Collection $Tags
 * @property UserPostVoting $PostVoting
 * @property Doctrine_Collection $Answers
 * @property Doctrine_Collection $PostTags
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method integer             getCategoryId()  Returns the current record's "category_id" value
 * @method integer             getUserId()      Returns the current record's "user_id" value
 * @method string              getTitle()       Returns the current record's "title" value
 * @method string              getText()        Returns the current record's "text" value
 * @method integer             getViews()       Returns the current record's "views" value
 * @method integer             getVotes()       Returns the current record's "votes" value
 * @method boolean             getIsShow()      Returns the current record's "is_show" value
 * @method Profile             getProfile()     Returns the current record's "Profile" value
 * @method Category            getCategory()    Returns the current record's "Category" value
 * @method Doctrine_Collection getTags()        Returns the current record's "Tags" collection
 * @method UserPostVoting      getPostVoting()  Returns the current record's "PostVoting" value
 * @method Doctrine_Collection getAnswers()     Returns the current record's "Answers" collection
 * @method Doctrine_Collection getPostTags()    Returns the current record's "PostTags" collection
 * @method Post                setId()          Sets the current record's "id" value
 * @method Post                setCategoryId()  Sets the current record's "category_id" value
 * @method Post                setUserId()      Sets the current record's "user_id" value
 * @method Post                setTitle()       Sets the current record's "title" value
 * @method Post                setText()        Sets the current record's "text" value
 * @method Post                setViews()       Sets the current record's "views" value
 * @method Post                setVotes()       Sets the current record's "votes" value
 * @method Post                setIsShow()      Sets the current record's "is_show" value
 * @method Post                setProfile()     Sets the current record's "Profile" value
 * @method Post                setCategory()    Sets the current record's "Category" value
 * @method Post                setTags()        Sets the current record's "Tags" collection
 * @method Post                setPostVoting()  Sets the current record's "PostVoting" value
 * @method Post                setAnswers()     Sets the current record's "Answers" collection
 * @method Post                setPostTags()    Sets the current record's "PostTags" collection
 * 
 * @package    capsoff.net
 * @subpackage model
 * @author     Моисеев Данил
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePost extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('post');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 300, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 300,
             ));
        $this->hasColumn('text', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 4000,
             ));
        $this->hasColumn('views', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('votes', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('is_show', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Profile', array(
             'local' => 'user_id',
             'foreign' => 'user_id'));

        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasMany('Tag as Tags', array(
             'refClass' => 'PostTags',
             'local' => 'post_id',
             'foreign' => 'tag_id'));

        $this->hasOne('UserPostVoting as PostVoting', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('Answer as Answers', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('PostTags', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}